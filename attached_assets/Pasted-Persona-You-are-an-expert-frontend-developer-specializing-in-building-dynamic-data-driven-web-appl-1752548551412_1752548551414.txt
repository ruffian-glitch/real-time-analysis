Persona: You are an expert frontend developer specializing in building dynamic, data-driven web applications with React.js. You have a keen eye for modern UI/UX design, creating interactive dashboards, and integrating with backend APIs.

Core Request:
Build the complete user-facing "Results Page" for an AI Fitness Coach application using React.js. This page is not static; it's a highly interactive dashboard that displays the results of a user's fitness drill analysis. The page must be visually appealing, responsive, and provide a seamless user experience, integrating a video player, performance metrics, data visualizations, and an AI-powered chat interface.

High-Level Page Structure & Workflow:
This page is the final step in the user journey, appearing after a user has successfully uploaded a video and the backend has finished processing it. The data for this page is received directly from the backend's /api/analyze endpoint.

The page should be organized into three main sections from top to bottom:

Video & Live Metrics Section: The main video player with an overlay of real-time stats.

Detailed Metrics & Comparative Analysis Section: User inputs and a breakdown of performance, including calorie calculations and comparisons.

Performance Graphs Section: Visual charts showing trends over time.

A floating chat button will be present to open the AI chatbot interface, which will intelligently rearrange the layout.

Detailed Component Requirements:
1. The Main Video Player & Overlay
Functionality: Create a prominent video player component that displays the processed video returned from the backend (the one with MediaPipe pose landmarks drawn on it).

Orientation: The video player must correctly handle video orientation. The backend logic in app.py ensures the video file itself is properly rotated, so the player should display it as is.

Dynamic Metrics Overlay: Superimpose a clean, modern metrics box on the top-left corner of the video player. This box must be context-aware and update dynamically based on the drill_type:

For Push-ups, Squats, and Sit-ups: The box should display Rep Count: and Status: (e.g., Up, Down).

For Chair Hold and Elbow Plank: The box should only display Hold Time: (e.g., 25s).

For Single Leg Balance: The box should display Lifted Leg: (e.g., Right) and Hold Time: (e.g., 18s).

2. Detailed Metrics & Comparative Analysis
Functionality: Directly beneath the video player, create a section for detailed metrics.

User Inputs: Include input fields for the user to enter their Age, Gender, and Weight. These fields should be clearly labeled.

Calculated Metrics:

When the user provides their details, the application should calculate and display Calories Burned. The formula for this can be referenced in the backend app.py logic.

Comparative Analysis: Display a small section that compares the user's performance (e.g., total reps or hold time) to a "class average" for their age, gender, and weight. You can use mock data for these averages (e.g., "You performed 15% better than the average for your group."). This is a key motivational feature.

3. The Interactive Chatbot
UI Element: Place a circular chat icon button fixed on the bottom-right corner of the screen.

Interaction & Animation:

When the user clicks this button, the layout must animate smoothly.

A new chat interface should slide in from the left to occupy the left 50% of the screen.

Simultaneously, the Detailed Metrics and Performance Graphs sections on the right should be hidden.

The Video Player component should expand to fill the entire right 50% of the screen, providing maximum visibility for video playback while chatting. The user can then ask the chatbot for specific metrics if they wish.

Clicking the chat button again (or a close icon within the chat panel) should reverse the animation, hiding the chat panel and revealing the metrics and graphs again.

4. AI-Powered Video Interaction
Functionality: This is the core of the chat interaction. The chatbot must be able to control the video player.

Implementation: When the user asks a question like, "Show me my best rep," the frontend will receive a response from the backend's /api/chat endpoint. This response will contain both the text to display and an action object with start_frame and end_frame.

Your React application must be able to:

Parse this action object from the API response.

Use the frame data to calculate the start and end times in seconds (based on the video's FPS).

Programmatically control the video player to play the specific segment and then pause. This creates an interactive and highly valuable feedback loop for the user.

5. Performance Graphs
Functionality: Below the "Detailed Metrics" section, display a graph.

Content: The graph should visualize data like "Form Consistency Over Time." It will use the time-series data provided in the analysis JSON from the backend.

Technology: Use a standard charting library for React, such as Recharts or Chart.js, to create clean and readable line charts.

Final Deliverable:
Generate a single, self-contained React application that implements all the features described above. The code should be well-structured, with clear components for the VideoPlayer, MetricsDashboard, ChatInterface, and Graphs. Pay close attention to styling to ensure a modern, professional, and responsive user interface.